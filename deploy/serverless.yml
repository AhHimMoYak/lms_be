service: KHJ-ecs-service-test

provider:
  name: aws
  region: ap-northeast-2
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ecs:*
            - ec2:*
            - iam:PassRole
            - elasticloadbalancing:*
            - logs:*
            - cloudwatch:*
          Resource: "*"

resources:
  Resources:
    # VPC 생성
    ECSCluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: KHJ-ECS-Cluster
    MyVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.1.0.0/16 # 새로운 CIDR 블록
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: KHJ
          - Key: Project
            Value: KHJ-ECS

    # 인터넷 게이트웨이 생성
    MyInternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: KHJ
          - Key: Project
            Value: KHJ-ECS

    # VPC에 인터넷 게이트웨이 연결
    AttachGateway:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref MyVPC
        InternetGatewayId: !Ref MyInternetGateway

    # 퍼블릭 라우트 테이블 생성
    MyRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MyVPC
        Tags:
          - Key: Name
            Value: KHJ
          - Key: Project
            Value: KHJ-ECS

    # 인터넷을 위한 기본 라우트 추가
    MyRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref MyRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref MyInternetGateway

    # 퍼블릭 서브넷 생성 (2개)
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MyVPC
        CidrBlock: 10.1.1.0/24 # 새로운 서브넷 CIDR 블록
        AvailabilityZone: ap-northeast-2a
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: KHJ-Subnet1
          - Key: Project
            Value: KHJ-ECS

    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MyVPC
        CidrBlock: 10.1.2.0/24 # 새로운 서브넷 CIDR 블록
        AvailabilityZone: ap-northeast-2b
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: KHJ-Subnet2
          - Key: Project
            Value: KHJ-ECS

    # 라우트 테이블과 퍼블릭 서브넷 연결
    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref MyRouteTable

    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet2
        RouteTableId: !Ref MyRouteTable


    # ALB 생성
    MyALB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: KHJ-alb
        Subnets:
          - !Ref PublicSubnet1    # ALB 보안 그룹 생성
    MyALBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow HTTP and HTTPS traffic to ALB
        VpcId: !Ref MyVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: "80"
            ToPort: "80"
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: "443"
            ToPort: "443"
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: MyALBSecurityGroup-KHJ
          - Key: Project
            Value: KHJ-ECS

    # ECS 보안 그룹 생성
    MyECSSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow HTTP access from ALB
        VpcId: !Ref MyVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupId: !Ref MyALBSecurityGroup
          - IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080
            SourceSecurityGroupId: !Ref MyALBSecurityGroup
        Tags:
          - Key: Name
            Value: MyECSSecurityGroup-KHJ
          - Key: Project
            Value: KHJ-ECS

          - !Ref PublicSubnet2
        SecurityGroups:
          - !Ref MyALBSecurityGroup
        Scheme: internet-facing
        Type: application

    MyLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /ecs/KHJ-task
        RetentionInDays: 7

    # ALB 대상 그룹 생성 (컨테이너별로 분리)
    InstitutionTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: institution-target-group-KHJ
        Protocol: HTTP
        Port: 8080
        VpcId: !Ref MyVPC
        TargetType: ip
        HealthCheckProtocol: HTTP
        HealthCheckPort: "8080"
        HealthCheckPath: "/institutions/actuator/health"
        Matcher:
          HttpCode: "200"

    StudentTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: student-target-group-KHJ
        Protocol: HTTP
        Port: 8080
        VpcId: !Ref MyVPC
        TargetType: ip
        HealthCheckProtocol: HTTP
        HealthCheckPort: "8080"
        HealthCheckPath: "/students/actuator/health"
        Matcher:
          HttpCode: "200"

    CompanyTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: company-target-group-KHJ
        Protocol: HTTP
        Port: 8080
        VpcId: !Ref MyVPC
        TargetType: ip
        HealthCheckProtocol: HTTP
        HealthCheckPort: "8080"
        HealthCheckPath: "/companies/actuator/health"
        Matcher:
          HttpCode: "200"

    # ALB 리스너 정의 (기본 동작 및 경로 기반 규칙 추가)
    MyALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn: !Ref MyALB
        Protocol: HTTP
        Port: 80
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref InstitutionTargetGroup

    # ALB HTTPS 리스너
    MyALBListenerHTTPS:
      Type: AWS::ElasticLoadBalancingV2::Listener
      DependsOn:
        - MyALB
        - InstitutionTargetGroup
      Properties:
        LoadBalancerArn: !Ref MyALB
        Protocol: HTTPS
        Port: 443
        Certificates:
          - CertificateArn: ${self:custom.customDomain.certificateArn}
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref InstitutionTargetGroup

    # ALB 리스너 규칙 정의 (경로 기반 라우팅)
    InstitutionPathRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        ListenerArn: !Ref MyALBListenerHTTPS
        Priority: 1
        Conditions:
          - Field: path-pattern
            Values:
              - /v1/institutions/*
              - /institutions/actuator/*
        Actions:
          - Type: forward
            TargetGroupArn: !Ref InstitutionTargetGroup

    StudentPathRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        ListenerArn: !Ref MyALBListenerHTTPS
        Priority: 2
        Conditions:
          - Field: path-pattern
            Values:
              - /v1/students/*
              - /students/actuator/*
        Actions:
          - Type: forward
            TargetGroupArn: !Ref StudentTargetGroup

    CompanyPathRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        ListenerArn: !Ref MyALBListenerHTTPS
        Priority: 3
        Conditions:
          - Field: path-pattern
            Values:
              - /v1/companies/*
              - /companies/actuator/*
        Actions:
          - Type: forward
            TargetGroupArn: !Ref CompanyTargetGroup

    # IAM 역할 생성 (Execution Role과 Task Role)
    ExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action: sts:AssumeRole
              Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
        Policies:
          - PolicyName: ExecutionPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - ecr:GetAuthorizationToken
                    - ecr:BatchGetImage
                    - ecr:BatchCheckLayerAvailability
                    - ecr:GetDownloadUrlForLayer
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"
          - PolicyName: ApplicationAutoScalingPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - application-autoscaling:*
                    - ecs:UpdateService
                  Resource: "*"

    TaskRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action: sts:AssumeRole
              Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
        Policies:
          - PolicyName: TaskPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - ecs:DescribeTasks
                    - ecs:UpdateService
                    - ecs:RunTask
                    - ecs:ListTasks
                  Resource: "*"

    # ECS 태스크 정의 (컨테이너 3개 각각의 태스크로 분리)
    InstitutionTaskDefinition:
      Type: AWS::ECS::TaskDefinition
      Properties:
        Family: institution-task-family-KHJ
        NetworkMode: awsvpc
        Cpu: "256"
        Memory: "512"
        RequiresCompatibilities:
          - FARGATE
        ExecutionRoleArn: !GetAtt ExecutionRole.Arn
        TaskRoleArn: !GetAtt TaskRole.Arn
        ContainerDefinitions:
          - Name: institution-service-container-KHJ
            Image: 503561434552.dkr.ecr.ap-northeast-2.amazonaws.com/institution-service:latest
            PortMappings:
              - ContainerPort: 8080
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: /ecs/KHJ-task
                awslogs-region: ap-northeast-2
                awslogs-stream-prefix: ecs

    StudentTaskDefinition:
      Type: AWS::ECS::TaskDefinition
      Properties:
        Family: student-task-family-KHJ
        NetworkMode: awsvpc
        Cpu: "256"
        Memory: "512"
        RequiresCompatibilities:
          - FARGATE
        ExecutionRoleArn: !GetAtt ExecutionRole.Arn
        TaskRoleArn: !GetAtt TaskRole.Arn
        ContainerDefinitions:
          - Name: student-service-container-KHJ
            Image: 503561434552.dkr.ecr.ap-northeast-2.amazonaws.com/student-service:latest
            PortMappings:
              - ContainerPort: 8080
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: /ecs/KHJ-task
                awslogs-region: ap-northeast-2
                awslogs-stream-prefix: ecs

    CompanyTaskDefinition:
      Type: AWS::ECS::TaskDefinition
      Properties:
        Family: company-task-family-KHJ
        NetworkMode: awsvpc
        Cpu: "256"
        Memory: "512"
        RequiresCompatibilities:
          - FARGATE
        ExecutionRoleArn: !GetAtt ExecutionRole.Arn
        TaskRoleArn: !GetAtt TaskRole.Arn
        ContainerDefinitions:
          - Name: company-service-container-KHJ
            Image: 503561434552.dkr.ecr.ap-northeast-2.amazonaws.com/company-service:latest
            PortMappings:
              - ContainerPort: 8080
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: /ecs/KHJ-task
                awslogs-region: ap-northeast-2
                awslogs-stream-prefix: ecs

    # API Gateway REST API
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: RestApi-do
        EndpointConfiguration:
          Types:
            - REGIONAL

    # API Gateway 리소스
    ApiGatewayResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
        PathPart: "{proxy+}"

    # API Gateway 메서드
    ApiGatewayMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ResourceId: !Ref ApiGatewayResource
        HttpMethod: ANY
        AuthorizationType: NONE
        Integration:
          IntegrationHttpMethod: ANY
          Type: HTTP_PROXY
          Uri: !Sub "http://${MyALB.DNSName}/{proxy}"
          PassthroughBehavior: WHEN_NO_MATCH
          RequestParameters:
            "integration.request.path.proxy": "method.request.path.proxy"
        RequestParameters:
          "method.request.path.proxy": true
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

    # API Gateway 배포 설정
    ApiGatewayDeployment:
      Type: AWS::ApiGateway::Deployment
      DependsOn:
        - ApiGatewayMethod
      Properties:
        RestApiId: !Ref ApiGatewayRestApi

    # API Gateway 스테이지 설정
    ApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        DeploymentId: !Ref ApiGatewayDeployment
        StageName: dev

    # ECS 서비스 정의 (컨테이너 3개 각각의 서비스로 분리)
    StudentECSService:
      Type: AWS::ECS::Service
      DependsOn:
        - StudentTargetGroup
        - MyALBListener
        - StudentPathRule
      Properties:
        Cluster: !Ref ECSCluster
        TaskDefinition: !Ref StudentTaskDefinition
        DesiredCount: 1
        LaunchType: FARGATE
        NetworkConfiguration:
          AwsvpcConfiguration:
            Subnets:
              - !Ref PublicSubnet1
              - !Ref PublicSubnet2
            SecurityGroups:
              - !Ref MyECSSecurityGroup
            AssignPublicIp: ENABLED
        LoadBalancers:
          - TargetGroupArn: !Ref StudentTargetGroup
            ContainerName: student-service-container-KHJ
            ContainerPort: 8080

    InstitutionECSService:
      Type: AWS::ECS::Service
      DependsOn:
        - InstitutionTargetGroup
        - MyALBListener
        - InstitutionPathRule
      Properties:
        Cluster: !Ref ECSCluster
        TaskDefinition: !Ref InstitutionTaskDefinition
        DesiredCount: 1
        LaunchType: FARGATE
        NetworkConfiguration:
          AwsvpcConfiguration:
            Subnets:
              - !Ref PublicSubnet1
              - !Ref PublicSubnet2
            SecurityGroups:
              - !Ref MyECSSecurityGroup
            AssignPublicIp: ENABLED
        LoadBalancers:
          - TargetGroupArn: !Ref InstitutionTargetGroup
            ContainerName: institution-service-container-KHJ
            ContainerPort: 8080

    CompanyECSService:
      Type: AWS::ECS::Service
      DependsOn:
        - CompanyTargetGroup
        - MyALBListener
        - CompanyPathRule
      Properties:
        Cluster: !Ref ECSCluster
        TaskDefinition: !Ref CompanyTaskDefinition
        DesiredCount: 1
        LaunchType: FARGATE
        NetworkConfiguration:
          AwsvpcConfiguration:
            Subnets:
              - !Ref PublicSubnet1
              - !Ref PublicSubnet2
            SecurityGroups:
              - !Ref MyECSSecurityGroup
            AssignPublicIp: ENABLED
        LoadBalancers:
          - TargetGroupArn: !Ref CompanyTargetGroup
            ContainerName: company-service-container-KHJ
            ContainerPort: 8080

plugins:
  - serverless-domain-manager
custom:
  customDomain:
    domainName: api.ahimmoyak.click
    basePath: "ecs"
    stage: dev
    createRoute53Record: true
    endpointType: REGIONAL
    certificateArn: arn:aws:acm:ap-northeast-2:503561434552:certificate/c56e0793-3d74-4357-9d42-bebb8e34511c
