Resources:
  # API Gateway REST API
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: RestApi-do
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway 리소스
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "{proxy+}"

  # OPTIONS 메서드
  # OPTIONS 요청을 ECS(Spring Boot)로 전달
  ApiGatewayMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: OPTIONS
        Type: HTTP_PROXY
        Uri: !Sub "http://${MyALB.DNSName}/{proxy}"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          "integration.request.path.proxy": "method.request.path.proxy"
      RequestParameters:
        "method.request.path.proxy": true

  # GET 메서드
  ApiGatewayMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref AuthorizerJWTApiGateway
      Integration:
        IntegrationHttpMethod: GET
        Type: HTTP_PROXY
        Uri: !Sub "http://${MyALB.DNSName}/{proxy}"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          "integration.request.path.proxy": "method.request.path.proxy"
      RequestParameters:
        "method.request.path.proxy": true

  # POST 메서드
  ApiGatewayMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref AuthorizerJWTApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: HTTP_PROXY
        Uri: !Sub "http://${MyALB.DNSName}/{proxy}"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          "integration.request.path.proxy": "method.request.path.proxy"
      RequestParameters:
        "method.request.path.proxy": true

  # PUT 메서드
  ApiGatewayMethodPut:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: PUT
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref AuthorizerJWTApiGateway
      Integration:
        IntegrationHttpMethod: PUT
        Type: HTTP_PROXY
        Uri: !Sub "http://${MyALB.DNSName}/{proxy}"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          "integration.request.path.proxy": "method.request.path.proxy"
      RequestParameters:
        "method.request.path.proxy": true

  # DELETE 메서드
  ApiGatewayMethodDelete:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: DELETE
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref AuthorizerJWTApiGateway
      Integration:
        IntegrationHttpMethod: DELETE
        Type: HTTP_PROXY
        Uri: !Sub "http://${MyALB.DNSName}/{proxy}"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          "integration.request.path.proxy": "method.request.path.proxy"
      RequestParameters:
        "method.request.path.proxy": true

  # API Gateway 배포 설정
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethodOptions
      - ApiGatewayMethodGet
      - ApiGatewayMethodPost
      - ApiGatewayMethodPut
      - ApiGatewayMethodDelete
    Properties:
      RestApiId: !Ref ApiGatewayRestApi

  # API Gateway 스테이지 설정
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      DeploymentId: !Ref ApiGatewayDeployment
      StageName: dev