service: user-management-api

provider:
    name: aws
    runtime: nodejs20.x
    region: ap-northeast-2
    environment:
        USERS_TABLE: "Users"
        REGION: ${aws:region}
    iam:
        role:
            statements:
                - Effect: Allow
                  Action:
                      - dynamodb:Query
                      - dynamodb:Scan
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                      - dynamodb:DeleteItem
                  Resource:
                      - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
                      - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/*"
                - Effect: Allow
                  Action:
                      - logs:CreateLogGroup
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                  Resource: "*"

functions:
    createUser:
     handler: src/handlers/users_management/create-user.handler
     events:
         - http:
               path: user
               method: post

    getUserById:
        handler: src/handlers/users_management/get-user.handler
        events:
            - http:
                  path: /v1/user
                  method: get
                  cors:
                      origin: "https://devton.ahimmoyak.click"
                      headers:
                          - Authorization
                          - Content-Type
                      allowCredentials: true
                  authorizer:
                      type: TOKEN
                      authorizerId:
                          Ref: AuthorizerJWTApiGateway
resources:
    Resources:
        AuthorizerJWTApiGateway:
            Type: AWS::ApiGateway::Authorizer
            Properties:
                Name: AuthorizerJWT
                Type: TOKEN
                IdentitySource: method.request.header.Cookie
                RestApiId:
                    Ref: ApiGatewayRestApi
                AuthorizerUri:
                    Fn::Join:
                        - ""
                        - - "arn:aws:apigateway:"
                          - Ref: AWS::Region
                          - ":lambda:path/2015-03-31/functions/"
                          - "arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:lambda-authorizer-service-prod-AuthorizerJWT"
                          - "/invocations"
        LambdaInvokePermissionForApiGateway:
            Type: AWS::Lambda::Permission
            Properties:
                FunctionName: "arn:aws:lambda:${self:provider.region}:${aws:accountId}:lambda-authorizer-service-prod-AuthorizerJWT"
                Action: lambda:InvokeFunction
                Principal: apigateway.amazonaws.com
                SourceArn:
                    Fn::Join:
                        - ""
                        - - "arn:aws:execute-api:"
                          - Ref: AWS::Region
                          - ":"
                          - Ref: AWS::AccountId
                          - ":"
                          - Ref: ApiGatewayRestApi
                          - "/*"

custom:
    customDomain:
        domainName: api.ahimmoyak.click
        basePath: "users"
        stage: dev
        createRoute53Record: true
        endpointType: REGIONAL
        certificateName: "arn:aws:acm:${self:provider.region}:${aws:accountId}:certificate/${env:CERTIFICATEDID}"

package:
    patterns:
        - "!node_modules/**"
        - "!src/handlers/**"
        - "!src/authorizer/**"
        - "src/handlers/users_management/**"
        - "!*.yml"
    individually: false

plugins:
    - serverless-plugin-dotenv
    - serverless-offline
    - serverless-domain-manager
