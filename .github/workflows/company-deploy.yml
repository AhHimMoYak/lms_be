name: company-service deploy

on:
  pull_request:
    branches:
      - microservice
    types:
      - closed
    paths:
      - 'company-service/**'
jobs:
  deploy:
    if: ${{github.event.pull_request.merged}}
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK17 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Create necessary directories
        run: mkdir -p ./company-service/src/main/resources

      - name: application.yml 파일 만들기
        run: |
          echo -e "${{ secrets.COMPANY_APPLICATION_PROPERTIES }}" > ./company-service/src/main/resources/application.yml

      - name: 테스트 및 빌드하기
        working-directory: ./company-service
        run: |
          chmod +x ./gradlew
          ./gradlew clean build

      - name: AWS Resource 에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인 하기.
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: ECR에 로그인 한 결과 확인
        run: echo ${{ steps.login-ecr.outputs.registry }}

      - name: Docker 이미지 생성
        working-directory: ./company-service
        run: docker build -t company-cicd .

      - name: Dokcer 이미지 생성 확인
        run: |
          ls
          pwd

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag company-cicd ${{ steps.login-ecr.outputs.registry }}/company-service:latest1.1

      - name: ECR에 docker image push 하기
        run: docker push ${{ steps.login-ecr.outputs.registry }}/company-service:latest1.1

      - name: 태스크 정의 업데이트
        id: task-def
        run: |
          
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition lms-be-def --query 'taskDefinition')

          # 2. 불필요한 필드 제거 및 유효한 필드만 유지
            NEW_TASK_DEFINITION=$(echo "$TASK_DEFINITION" | jq '{
          family: .family,
          taskRoleArn: (.taskRoleArn // ""),
          executionRoleArn: (.executionRoleArn // ""),
          networkMode: .networkMode,
          containerDefinitions: .containerDefinitions,
          volumes: .volumes,
          placementConstraints: .placementConstraints,
          requiresCompatibilities: .requiresCompatibilities,
          cpu: .cpu,
          memory: .memory
          }')
          
          # 3. 새 컨테이너 이미지 설정
          FINAL_TASK_DEFINITION=$(echo "$NEW_TASK_DEFINITION" | jq --arg IMAGE_URI "503561434552.dkr.ecr.ap-northeast-2.amazonaws.com/web-service:latest" '
            .containerDefinitions[0].image = $IMAGE_URI
            ')
          
            # 4. 새로운 태스크 정의를 JSON 파일로 저장
            echo "$FINAL_TASK_DEFINITION" > new-task-def.json
          
            # 5. 새 태스크 정의 등록
            aws ecs register-task-definition --cli-input-json file://new-task-def.json

      - name: ECS 서비스 업데이트 및 배포 강제
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service ${{ secrets.COMPANY_ECS_SERVICE_NAME }} \
            --force-new-deployment