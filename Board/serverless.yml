service: board
provider:
  name: aws
  runtime: nodejs20.x
  region: ap-northeast-2
  stage: dev
  environment:
    BOARD_TABLE: "course-board"
    COMMENT_TABLE: "comment"
    REGION: ${aws:region}
    ACCESS_CONTROL_ALLOW_ORIGIN: ${env:ACCESS_CONTROL_ALLOW_ORIGIN}
    ACCESS_CONTROL_ALLOW_ORIGIN_1: ${env:ACCESS_CONTROL_ALLOW_ORIGIN_1}
    ACCESS_CONTROL_ALLOW_ORIGIN_3: ${env:ACCESS_CONTROL_ALLOW_ORIGIN_3}
  tags:
    Name: ahim
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.BOARD_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.BOARD_TABLE}/index/*"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.COMMENT_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.COMMENT_TABLE}/index/*"
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"

functions:
  create-board:
    handler: lambda/board/create-board.handler
    dependsOn:
      - CourseBoardTable
      - CommentsTable
    events:
      - http:
          path: /v1/courses
          method: POST
          cors: true
          authorizer:
            type: TOKEN
            authorizerId:
              Ref: AuthorizerJWTApiGateway
      - http:
          path: /v1/courses
          method: options
          cors:
            origin: ${env:ACCESS_CONTROL_ALLOW_ORIGIN_3}
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
            allowCredentials: true
  get-board:
    handler: lambda/board/get-board.handler
    dependsOn:
      - CourseBoardTable
      - CommentsTable
    events:
      - http:
          path: /v1/{boardId}
          method: GET
          cors: true
          authorizer:
            type: TOKEN
            authorizerId:
              Ref: AuthorizerJWTApiGateway
      - http:
          path: /v1/{boardId}
          method: options
          cors:
            origin: ${env:ACCESS_CONTROL_ALLOW_ORIGIN_3}
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
            allowCredentials: true

  get-user-boards:
    handler: lambda/board/get-user-boards.handler
    dependsOn:
      - CourseBoardTable
      - CommentsTable
    events:
      - http:
          path: /v1/user-name/{userName}
          method: GET
          cors:
            origin: ${env:ACCESS_CONTROL_ALLOW_ORIGIN_1}
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
            allowCredentials: true
          authorizer:
            type: TOKEN
            authorizerId:
              Ref: AuthorizerJWTApiGateway

  get-course-boards:
    handler: lambda/board/get-course-boards.handler
    dependsOn:
      - CourseBoardTable
      - CommentsTable
    events:
      - http:
          path: /v1/courses/{courseId}/{type}
          method: GET
          cors: true
          authorizer:
            type: TOKEN
            authorizerId:
              Ref: AuthorizerJWTApiGateway
      - http:
          path: /v1/courses/{courseId}/{type}
          method: options
          cors:
            origin: ${env:ACCESS_CONTROL_ALLOW_ORIGIN_3}
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
            allowCredentials: true

  update-board:
    handler: lambda/board/update-board.handler
    dependsOn:
      - CourseBoardTable
      - CommentsTable
    events:
      - http:
          path: /v1/{boardId}
          method: PATCH
          cors: false
          authorizer:
            type: TOKEN
            authorizerId:
              Ref: AuthorizerJWTApiGateway
      - http:
          path: /v1/{boardId}
          method: options
          cors:
            origin: ${env:ACCESS_CONTROL_ALLOW_ORIGIN_3}
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
            allowCredentials: true

  delete-board:
    handler: lambda/board/delete-board.handler
    dependsOn:
      - CourseBoardTable
      - CommentsTable
    events:
      - http:
          path: /v1/{boardId}
          method: DELETE
          cors: false
          authorizer:
            type: TOKEN
            authorizerId:
              Ref: AuthorizerJWTApiGateway
      - http:
          path: /v1/{boardId}
          method: options
          cors:
            origin: ${env:ACCESS_CONTROL_ALLOW_ORIGIN_3}
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
            allowCredentials: true
  create-comment:
    handler: lambda/comment/create-comment.handler
    dependsOn:
      - CourseBoardTable
      - CommentsTable
    events:
      - http:
          path: /v1/{boardId}/comments
          method: POST
          cors: false
          authorizer:
            type: TOKEN
            authorizerId:
              Ref: AuthorizerJWTApiGateway
      - http:
          path: /v1/{boardId}/comments
          method: options
          cors:
            origin: ${env:ACCESS_CONTROL_ALLOW_ORIGIN_3}
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
            allowCredentials: true
  get-comments:
    handler: lambda/comment/get-comments.handler
    dependsOn:
      - CourseBoardTable
      - CommentsTable
    events:
      - http:
          path: /v1/{boardId}/comments
          method: GET
          cors: false
          authorizer:
            type: TOKEN
            authorizerId:
              Ref: AuthorizerJWTApiGateway
      - http:
          path: /v1/{boardId}/comments
          method: options
          cors:
            origin: ${env:ACCESS_CONTROL_ALLOW_ORIGIN_3}
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
            allowCredentials: true
  update-comment:
    handler: lambda/comment/update-comment.handler
    dependsOn:
      - CourseBoardTable
      - CommentsTable
    events:
      - http:
          path: /v1/comments/{commentId}
          method: PATCH
          cors: false
          authorizer:
            type: TOKEN
            authorizerId:
              Ref: AuthorizerJWTApiGateway
      - http:
          path: /v1/comments/{commentId}
          method: options
          cors:
            origin: ${env:ACCESS_CONTROL_ALLOW_ORIGIN_3}
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
            allowCredentials: true
  delete-comment:
    handler: lambda/comment/delete-comment.handler
    dependsOn:
      - CourseBoardTable
      - CommentsTable
    events:
      - http:
          path: /v1/{boardId}/{commentId}
          method: DELETE
          cors: false
          authorizer:
            type: TOKEN
            authorizerId:
              Ref: AuthorizerJWTApiGateway
      - http:
          path: /v1/{boardId}/{commentId}
          method: options
          cors:
            origin: ${env:ACCESS_CONTROL_ALLOW_ORIGIN_3}
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
            allowCredentials: true
resources:
  Resources:
    AuthorizerJWTApiGateway:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: AuthorizerJWT
        Type: TOKEN
        IdentitySource: method.request.header.Cookie
        RestApiId:
          Ref: ApiGatewayRestApi
        AuthorizerUri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - "arn:aws:lambda:ap-northeast-2:503561434552:function:lambda-authorizer-service-prod-AuthorizerJWT"
              - "/invocations"
        AuthorizerResultTtlInSeconds: 1
    LambdaInvokePermissionForApiGateway:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: "arn:aws:lambda:ap-northeast-2:503561434552:function:lambda-authorizer-service-prod-AuthorizerJWT"
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com
        SourceArn:
          Fn::Join:
            - ""
            - - "arn:aws:execute-api:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":"
              - Ref: ApiGatewayRestApi
              - "/*"
    CourseBoardTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.BOARD_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: userName
            AttributeType: S
          - AttributeName: courseId
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: UserIndex
            KeySchema:
              - AttributeName: userName
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: CourseIndex
            KeySchema:
              - AttributeName: courseId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    CommentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.COMMENT_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: boardId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: BoardIdIndex
            KeySchema:
              - AttributeName: boardId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: IdIndex
            KeySchema:
              - AttributeName: id
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

package:
  patterns:
    - "!node_modules/.bin/**"
    - "node_modules/**"
    - "lambda/**"
    - "aws-clients.mjs"
  individually: false

plugins:
  - serverless-domain-manager
  - serverless-plugin-dotenv
custom:
  dotenv:
    path: .env.${self:provider.stage}
  customDomain:
    domainName: api.ahimmoyak.click
    basePath: "board"
    createRoute53Record: true
    endpointType: REGIONAL
    certificateName: "arn:aws:acm:ap-northeast-2:503561434552:certificate/c56e0793-3d74-4357-9d42-bebb8e34511c"
