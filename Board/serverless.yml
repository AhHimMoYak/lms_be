service: ahim-ECS-test-company-service

provider:
  name: aws
  region: ap-northeast-2
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ecs:*
            - ec2:*
            - iam:PassRole
            - elasticloadbalancing:*
            - logs:*
            - cloudwatch:*
          Resource: "*"

resources:
  Resources:
    # VPC 생성
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: ahim-VPC-do

    # 퍼블릭 서브넷 생성 (1,2)
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.1.0/24
        AvailabilityZone: ap-northeast-2a
        MapPublicIpOnLaunch: true
        Tags:
          - Key: name
            Value: ahim-PS1
    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.2.0/24
        AvailabilityZone: ap-northeast-2b
        MapPublicIpOnLaunch: true
        Tags:
          - Key: name
            Value: ahim-PS2

    # 인터넷 게이트웨이
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: ahim-IGW-do

    # VPC 와 인터넷 게이트웨이 연결
    AttachGateway:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway

    # 퍼블릭 라우트 테이블
    RouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: ahim-RT-do

    # 인터넷을 위한 기본 라우트 추가
    Route:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref RouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    # 라우트 테이블과 퍼블릭 서브넷 연결
    PS1RTAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref RouteTable

    PS2RTAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet2
        RouteTableId: !Ref RouteTable

    # 보안 그룹 생성 (ALB와 ECS 각각 생성)
    ALBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Allow Http access for ALB"
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0


    ECSSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Allow HTTP/HTTPS traffic for ECS service"
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupId: !Ref ALBSecurityGroup
          - IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080
            SourceSecurityGroupId: !Ref ALBSecurityGroup
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0

    RDSSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Allow MySQL access for RDS"
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            SourceSecurityGroupId: !Ref ECSSecurityGroup
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0

    # ECS 클러스터 생성
    Cluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: ahim-Cluster-do

    # ALB
    ALB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: ahim-ALB-do
        Scheme: internet-facing
        Type: application
        Subnets:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        SecurityGroups:
          - !Ref ALBSecurityGroup
        LoadBalancerAttributes:
          - Key: idle_timeout.timeout_seconds
            Value: "60"
          - Key: deletion_protection.enabled
            Value: "false"
          - Key: routing.http2.enabled
            Value: "true"

    MyLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /ecs/my-task
        RetentionInDays: 7

    # ALB 대상그룹
    TargetGroupCompany:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: company-TG
        TargetType: ip
        Protocol: HTTP
        Port: 8080
        VpcId: !Ref VPC
        HealthCheckProtocol: HTTP
        HealthCheckPort: "8080"
        HealthCheckPath: /actuator/health
        HealthCheckIntervalSeconds: 30  # Health Check 주기
        HealthCheckTimeoutSeconds: 15    # 응답 대기 시간
        HealthyThresholdCount: 3        # 정상 상태로 간주하기 위한 횟수
        UnhealthyThresholdCount: 3      # 비정상 상태로 간주하기 위한 횟수
        Matcher:
          HttpCode: 200-299

    # ALB 리스너 생성 (경로 기반 리스너 설정)
    ALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      DependsOn:
        - ALB
        - TargetGroupCompany
      Properties:
        LoadBalancerArn: !Ref ALB
        Port: 80
        Protocol: HTTP
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref TargetGroupCompany

    # IAM 역할 생성 (Execution Role과 Task Role)
    ExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action: sts:AssumeRole
              Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
        Policies:
          - PolicyName: ExecutionPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - ecr:GetAuthorizationToken
                    - ecr:BatchGetImage
                    - ecr:BatchCheckLayerAvailability
                    - ecr:GetDownloadUrlForLayer
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"

    TaskRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action: sts:AssumeRole
              Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
        Policies:
          - PolicyName: TaskPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - ecs:DescribeTasks
                    - ecs:UpdateService
                    - ecs:RunTask
                  Resource: "*"

    # ECS 작업 정의 생성 (각 컨테이너별)
    CompanyTaskDefinition:
      Type: AWS::ECS::TaskDefinition
      Properties:
        Family: company-task
        Cpu: "256"
        Memory: "512"
        NetworkMode: awsvpc
        RequiresCompatibilities:
          - FARGATE
        ExecutionRoleArn: !GetAtt ExecutionRole.Arn
        TaskRoleArn: !GetAtt TaskRole.Arn
        ContainerDefinitions:
          - Name: company-container
            Image: 503561434552.dkr.ecr.ap-northeast-2.amazonaws.com/company-service:latest
            PortMappings:
              - ContainerPort: 8080
                HostPort: 8080
            Environment:
              - Name: SPRING_PROFILES_ACTIVE
                Value: local
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: /ecs/my-task
                awslogs-region: ap-northeast-2
                awslogs-stream-prefix: ecs

    # ECS 서비스 생성 (각 서비스별)
    CompanyService:
      Type: AWS::ECS::Service
      DependsOn:
        - ALB
        - TargetGroupCompany
      Properties:
        Cluster: !Ref Cluster
        DesiredCount: 1
        LaunchType: FARGATE
        TaskDefinition: !Ref CompanyTaskDefinition
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: ENABLED
            Subnets:
              - !Ref PublicSubnet1
              - !Ref PublicSubnet2
            SecurityGroups:
              - !Ref ECSSecurityGroup
              - !Ref RDSSecurityGroup
        LoadBalancers:
          - ContainerName: company-container
            ContainerPort: 8080
            TargetGroupArn: !Ref TargetGroupCompany
