service: build-curriculum

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ap-northeast-2
  apiGateway:
    binaryMediaTypes:
      - "*/*"
  environment:
    REGION: ${self:provider.region}
    BUCKET_NAME: ahimmoyak-contents
    AWS_BUCKET_BASE_URL: https://${self:provider.environment.BUCKET_NAME}.s3.${self:provider.region}.amazonaws.com
    DOWNLOAD_PATH: contents
    ACCESS_CONTROL_ALLOW_ORIGIN: ${env:ACCESS_CONTROL_ALLOW_ORIGIN}
    ACCESS_CONTROL_ALLOW_ORIGIN_1: ${env:ACCESS_CONTROL_ALLOW_ORIGIN_1}
    ACCESS_CONTROL_ALLOW_ORIGIN_2: ${env:ACCESS_CONTROL_ALLOW_ORIGIN_2}
    ACCESS_CONTROL_ALLOW_ORIGIN_3: ${env:ACCESS_CONTROL_ALLOW_ORIGIN_3}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:ListBucket
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - s3:ListMultipartUploadParts,
            - s3:AbortMultipartUpload
          Resource:
            - arn:aws:s3:::${self:provider.environment.BUCKET_NAME}
            - arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/*
  tags:
    Name: ahim

functions:
  uploadFile:
    handler: src/upload-contents.handler
    events:
      - http:
          path: /v1/files/upload
          method: post
          cors:
            origin: ${self:provider.environment.ACCESS_CONTROL_ALLOW_ORIGIN_3}
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
            allowCredentials: true
          authorizer:
            type: TOKEN
            authorizerId:
              Ref: AuthorizerJWTApiGateway

  completeMultipartUploads:
    handler: src/complete-multipart-upload.handler
    events:
      - http:
          path: /v1/files/complete-multipart
          method: post
          cors:
            origin: ${self:provider.environment.ACCESS_CONTROL_ALLOW_ORIGIN_3}
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
            allowCredentials: true
          authorizer:
            type: TOKEN
            authorizerId:
              Ref: AuthorizerJWTApiGateway

resources:
  Resources:
    ContentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BUCKET_NAME}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        AccessControl: Private
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
              AllowedHeaders:
                - "*"
              ExposedHeaders:
                - ETag
              MaxAge: 3000

    ContentBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ContentBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action:
                - s3:ListBucket
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
              Resource:
                - arn:aws:s3:::${self:provider.environment.BUCKET_NAME}
                - arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/*

    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"

    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: "ApiGatewayRestApi"

    AuthorizerJWTApiGateway:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: AuthorizerJWT
        Type: TOKEN
        IdentitySource: method.request.header.Cookie
        RestApiId:
          Ref: ApiGatewayRestApi
        AuthorizerUri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - "arn:aws:lambda:ap-northeast-2:503561434552:function:lambda-authorizer-service-prod-AuthorizerJWT"
              - "/invocations"
        AuthorizerResultTtlInSeconds: 1 # TTL 설정 (초 단위)
    LambdaInvokePermissionForApiGateway:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: "arn:aws:lambda:ap-northeast-2:503561434552:function:lambda-authorizer-service-prod-AuthorizerJWT"
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com
        SourceArn:
          Fn::Join:
            - ""
            - - "arn:aws:execute-api:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":"
              - Ref: ApiGatewayRestApi
              - "/*"

package:
  patterns:
    - "!./**"
    - "src/**"
    - "package.json"
    - "node_modules/**"

plugins:
  - serverless-domain-manager
  - serverless-plugin-dotenv

custom:
  dotenv:
    path: env.${self:provider.stage}
  customDomain:
    domainName: api.ahimmoyak.click
    basePath: "builder"
    stage: dev
    createRoute53Record: true
    endpointType: REGIONAL
    certificateName: "arn:aws:acm:ap-northeast-2:503561434552:certificate/c56e0793-3d74-4357-9d42-bebb8e34511c"
